/*
* lassoo.h
*
* Copyright 2019 Ryan Koehler, VerdAscend Sciences, ryan@verdascend.com
*
* The programs and source code of the vertools collection are free software.
* They are distributed in the hope that they will be useful,
* WITHOUT ANY WARRANTY OF FITNESS FOR ANY PARTICULAR PURPOSE.  
* 
* Permission is granted for research, educational, and possibly commercial use 
*   and modification as long as 1) Code and any derived works are not 
*   redistributed for any fee, and 2) Proper credit is given to the authors. 
*   If you wish to include this software in a product, or use it commercially,
*   please contact the authors.
*
* See https://www.verdascend.com/ for more
*
*/


#define VERSION_S "Lassoo Version 0.22"

#define DFMAX       500     /* Distance function max size */

#define LASSOO_ID   5091
typedef struct LASSOO
{
    int ID;
    char outname[NSIZE];    /* Output filename */
    FILE *out;              /* Output file */
    /***
    *   Bit string libraries
    */
    int iform;              /* Input file format */
    int istrict;            /* gnore or stop on pasrse errors */
    int bdim;               /* Bit dimension = number of bits/record */
    char elibname[NSIZE];   /* External library filename */
    struct BITPOOL *elib;   /* External library */
    int nelib;              /* External library size */
    char ilibname[NSIZE];   /* Internal library filename */
    struct BITPOOL *ilib;   /* Internal library */
    int nilib;              /* Internal library size */
    DOUB ilibco;            /* Internal library coefficient */
    char glibname[NSIZE];   /* Good reference library filename */
    struct BITPOOL *glib;   /* Good reference library */
    int nglib;              /* Good reference library size */
    DOUB glibco;            /* Good library coefficient */
    char blibname[NSIZE];   /* Bad reference library filename */
    struct BITPOOL *blib;   /* Bad reference library */
    int nblib;              /* Bad reference library size */
    DOUB blibco;            /* Bad library coefficient */
    int remain;             /* Number of externals remaining */
    int taken;              /* Number of externals taken */
    struct NUMLIST *status; /* External pool member status flags */
    struct NUMLIST *prank;  /* External pool member rank during picking */
    struct NUMLIST *iscores;/* External internal-pool scores */
    struct NUMLIST *gscores;/* External good-pool scores */
    struct NUMLIST *bscores;/* External bad-pool scores */
    struct SCOREC *srank;   /* External score ranking structure */
    /***
    *   Run time options
    */
    int pick;               /* Number of external members to pick */
    int win;                /* Update window size per cycle */
    int dform;              /* Distance function form */
    int dfep;               /* Distance function end point for 1% */
    int dfmax;              /* Distance function cut-off max (beyond = 0) */
    DOUB dfunc[DFMAX+1];    /* Distance function[bdim] */
    int verbose;            /* Flag for reporting */
}LASSOO;

#define CHECK_LASSOO(ob) if(ob){DestroyLassooI(ob); ob=NULL;}



/***
*   Input format codes
*/
#define BSIF_01     200     /* BitString input format as 0100110.. etc */

/***
*   Pool codes
*/
#define LASP_EXT    300     /* External pool */
#define LASP_INT    301     /* Internal pool */
#define LASP_GOOD   302     /* Good pool */
#define LASP_BAD    303     /* Bad pool */

/***
*   Distance function codes
*/
#define LASDF_GAUS  310     /* Gaussian */
#define LASDF_STEP  311     /* Step */
#define LASDF_LINE  312     /* Linear */
#define LASDF_INV   313     /* Inverse */

/***
*   Default settings
*/
#define DEF_VERB    TRUE    /* Default verbosity */
#define SCUPDATE    1000000 /* Score report update frequency */
#define DEF_PICK    200     /* Default number to pick */
#define DEF_WIN     25      /* Default update window number */
#define DEF_DFUNC   LASDF_GAUS  /* Default distance function */
#define DEF_DFEP    30      /* Default distance function cut off */
#define DEF_ICOEF   1.0     /* Default Internal library coefficient */
#define DEF_GCOEF   1.0     /* Default Good library coefficient */
#define DEF_BCOEF   1.0     /* Default Bad library coefficient */

#define DEF_IFORM   BSIF_01 /* Default input format */
#define FSCO_PRINT  "\t%9.6f"
#define PSCO_PRINT  "\t%8.6f"




/*********************** ppp ********************
* C function listing generated by gen_prot
* Tue Apr 22 14:56:12 2014
*/
/****************************************************************
* lassoo.c
*/
int main(int argc, char **argv);
void LassooUse(void);
int LassooI(int argc,char **argv);
LASSOO *CreateLassooPO(void);
int DestroyLassooI(LASSOO *lasPO);
void InitLassoo(LASSOO *lasPO);
int CheckLassooOptionsI(LASSOO *lasPO);
int RealizeLassooI(LASSOO *lasPO);
int SetLassooDistFunctI(LASSOO *lasPO);
int SetLasDistFuncGausI(LASSOO *lasPO);
int SetLasDistFuncStepI(LASSOO *lasPO) ;
int SetLasDistFuncLineI(LASSOO *lasPO) ;
int SetLasDistFuncInvI(LASSOO *lasPO) ;
int FillLasDistFuncNameStringI(int df, char *nameS);
int LoadLassooPoolsI(LASSOO *lasPO);
int FillLassooPoolTypeStringI(int what,char *typeS);
int LoadThisLassooPoolI(LASSOO *lasPO,int what);
int CompatBitpoolBitDimI(BITPOOL *bpPO,int dim);
void WriteLassooBanner(LASSOO *lasPO, FILE *outPF);
void WriteLassooHeader(LASSOO *lasPO, FILE *outPF);
void WriteBitpoolInfo(BITPOOL *bpPO, char *whatS, FILE *outPF);
void WriteLassooPickVars(LASSOO *lasPO, FILE *outPF);
void WriteLassooDistFunc(LASSOO *lasPO, FILE *outPF);
void WriteLassooColLabs(LASSOO *lasPO, FILE *outPF);
void WriteLassooOutput(LASSOO *lasPO, int cyc, FILE *outPF);
int UpdateInternalScoresI(LASSOO *lasPO,int cyc);
int CalcLassooInitalScoresI(LASSOO *lasPO);
int CalcScoresForBitpoolI(LASSOO *lasPO, BITPOOL *bpPO, NUMLIST *scoresPO);
int CalcLassooScoresI(LASSOO *lasPO);
int PickBestExternalsI(LASSOO *lasPO,int cyc);

