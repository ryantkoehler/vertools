/*
* gen_seq.h
*
* Copyright 2019 Ryan Koehler, VerdAscend Sciences, ryan@verdascend.com
*
* The programs and source code of the vertools collection are free software.
* They are distributed in the hope that they will be useful,
* WITHOUT ANY WARRANTY OF FITNESS FOR ANY PARTICULAR PURPOSE.  
* 
* Permission is granted for research, educational, and possibly commercial use 
*   and modification as long as 1) Code and any derived works are not 
*   redistributed for any fee, and 2) Proper credit is given to the authors. 
*   If you wish to include this software in a product, or use it commercially,
*   please contact the authors.
*
* See https://www.verdascend.com/ for more
*
*/


#define VERSION_S "Gen_Seq version 1.04"

/***
*   Data structure for holding settings for gen_seq
*/
#define GENSEQ_ID   5081
typedef struct GENSEQ
{
    int ID;
    char outfile[NSIZE];/* Output file name */
    FILE *out;          /* Output file */
    char bname[NSIZE];  /* Base name for output seqs */
    char parname[NSIZE];/* Parameter file name */
    char baseper[NSIZE];/* Base percentiles list */
    int basepnum[4];    /* Base percentile ACGT int array */
    struct IN_CONS *cons;/* onstraint settings object */
    struct SEQ *seq;    /* Working sequence object */
    int len,num;        /* Length / how many seqs to generate */
    DOUB n_max;         /* how many total ? (for stats) */
    DOUB n_good;        /* how many ok? (for stats) */
    DOUB n_tot;         /* how many considered? (for feedback) */
    DOUB nexttime;      /* For feedback */
    int quiet;          /* Flag for no feedback */
    int verb;           /* Flag for verbose output */
    int ok;             /* Flag placeholder for reporting seq status */
    int do_stat;        /* Report stats */
    int do_ostat;       /* Report only stats */
    int do_not;         /* Flag to invert constraints */
    int dump_all;       /* Dump all seqs (good or bad) */
    int dump_ok;        /* Report good or bad for sequence */
    int out_raw;        /* Dump out raw format; <name> <seq> / line */
    int out_fasta;      /* Dump out as fasta format */
    char filtname[NSIZE];/* ilename of seqs to filter */
    FILE *filt;         /* File of seqs to filter */
    int fform;          /* Filter file format */
    int iraw, ifas, iseq; /* input format flags */
    int igprob;         /* Flag to ignore input problems */
    int do_ran;         /* Flag to generate random sequences */
    int rseed;          /* Random number seed */
    int do_enu;         /* Flag to enumerate sequences */
    int do_both;        /* Compute both strands when enumerating */
}GENSEQ;

#define CHECK_GENSEQ(gs)    if(gs){DestroyGenseqI(gs);gs=NULL;}

#define DEF_LEN     8
#define DEF_NUM     20
#define DEF_TWEAK   1
#define DEF_BNAME_S "seq"
#define GENSEQ_UDF  100000      /* User update / report frequency */

/*********************** ppp ********************
* C function listing generated by gen_prot
* Wed Aug 20 10:34:03 2008
*/
/****************************************************************
* gen_seq.c
*/
int main(int argc, char **argv);
void GenSeqUse(void);
int GenSeqI(int argc, char **argv);
GENSEQ *CreateGenseqPO(void);
int DestroyGenseqI(GENSEQ *gsPO);
void InitGenseq(GENSEQ *gsPO);
int SetUpGenSeqI(GENSEQ *gsPO);
int CheckGenSeqOptionsI(GENSEQ *gsPO);
int HandleBasePerSetupI(GENSEQ *gsPO);
void WriteGenseqHeader(GENSEQ *gsPO,FILE *outPF);
int ExtendSeqI(char *seqS, int len, IN_CONS *iconPO, GENSEQ *gsPO);
double NumSkippedD(int len,int max);
int HandleCompleteSeqI(char *seqS,int len,char *nS,IN_CONS *iconPO,
    GENSEQ *gsPO);

