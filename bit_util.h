/*
* bit_util.h
*
* Copyright 2019 Ryan Koehler, VerdAscend Sciences, ryan@verdascend.com
*
* The programs and source code of the vertools collection are free software.
* They are distributed in the hope that they will be useful,
* WITHOUT ANY WARRANTY OF FITNESS FOR ANY PARTICULAR PURPOSE.  
* 
* Permission is granted for research, educational, and possibly commercial use 
*   and modification as long as 1) Code and any derived works are not 
*   redistributed for any fee, and 2) Proper credit is given to the authors. 
*   If you wish to include this software in a product, or use it commercially,
*   please contact the authors.
*
* See https://www.verdascend.com/ for more
*
*/

#define VERSION_S   "Bit_Util version 0.12"

#define BIT_UTIL_ID     5011
typedef struct BIT_UTIL
{
    int ID;
    char inname[NSIZE];     /* nput filename */
    int iform;              /* nput file format */
    int istrict;            /* nput strict error or warning */
    FILE *out;              /* utput file */
    char outname[NSIZE];    /* utput filename */
    int oform;              /* utput format */
    struct BITPOOL *bits;   /* it pool */
    int bsize;              /* it size (n bits) */
    int num;                /* umber of members in bit pool */
    char *mmask;            /* ember mask */
    char *bmask;            /* it mask */
    char sbname[NSIZE];     /* econd bit set filename */
    struct BITPOOL *sbits;  /* econd bit pool */
    int firstr,lastr;       /* irst / last record */
    int outbits;            /* utputing bits? */
    int outcomp;            /* utputing comparison results */
    int do_stat;            /* lag to report global stats */
    int do_ostat;           /* lag to output stats per rec */
    int do_band;            /* lag for logical AND */
    int do_bor;             /* lag for logical OR */
    int do_bxor;            /* lag for logical XOR */
    int do_bnot;            /* lag for logical NOT */
    int do_b3;              /* lag for all 3 logical outputs */
    int do_dump;            /* lag to dump */
    int do_fmat;            /* eport full pairwise matrix */
    int do_rap;             /* lag to report all pairs */
    struct BITPOOL *pretwk; /* re-tweak bit pool */
    int tw_num;             /* weak this number of bits */
    DOUB tw_frac;           /* weak this fraction of bits */
    int seed;               /* andom seed */
}BIT_UTIL;

#define CHECK_BIT_UTIL(bu)  if(bu){DestroyBit_utilI(bu); bu=NULL;}


/*********************** ppp ********************
* C function listing generated by gen_prot
* Sun Apr 20 11:33:56 2014
*/
/****************************************************************
* bit_util.c
*/
int main(int argc, char **argv);
void Bit_utilUse(void);
int Bit_utilI(int argc, char **argv);
BIT_UTIL *CreateBit_utilPO(void);
int DestroyBit_utilI(BIT_UTIL *buPO);
void InitBit_util(BIT_UTIL *buPO);
int CheckBtuOptionsI(BIT_UTIL *buPO);
int SetupBtuI(BIT_UTIL *buPO);
int SetupTweaksI(BIT_UTIL *buPO);
int OpenBtuFilesI(BIT_UTIL *buPO);
int LoadBtuBitpoolsI(BIT_UTIL *buPO);
int LoadOneNamedBitpoolI(char *nameS, int iform, int error, BITPOOL **bpPPO);
int SetUpBtuAuxDataI(BIT_UTIL *buPO);
int HandleBtuModsI(BIT_UTIL *buPO) ;
int HandleBtuTweaksI(BIT_UTIL *buPO);
int HandleBtuFiltersI(BIT_UTIL *buPO) ;
int IsBitpoolRecOkI(BIT_UTIL *buPO, BITPOOL *bpPO, int r);
void HandleBtuHeader(BIT_UTIL *buPO, FILE *outPF);
void HandleBtuOutput(BIT_UTIL *buPO, FILE *outPF);
void HandleBtuOutTable(BIT_UTIL *buPO, FILE *outPF);
void HandleBtuFmat(BIT_UTIL *buPO, FILE *outPF);
void WriteBtuFmatHeader(BIT_UTIL *buPO, FILE *outPF);
int BitpoolFromTableI(TABLE *tabPO, BITPOOL **bpPPO);
int TableFromBitpoolI(BITPOOL *bpPO, char *maskPC, TABLE **tabPPO);

