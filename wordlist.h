/*
* wordlist.h
*
* Copyright 2019 Ryan Koehler, VerdAscend Sciences, ryan@verdascend.com
*
* The programs and source code of the vertools collection are free software.
* They are distributed in the hope that they will be useful,
* WITHOUT ANY WARRANTY OF FITNESS FOR ANY PARTICULAR PURPOSE.  
* 
* Permission is granted for research, educational, and possibly commercial use 
*   and modification as long as 1) Code and any derived works are not 
*   redistributed for any fee, and 2) Proper credit is given to the authors. 
*   If you wish to include this software in a product, or use it commercially,
*   please contact the authors.
*
* See https://www.verdascend.com/ for more
*
*/


#ifndef __WORDLISTH__
#define __WORDLISTH__

#define WORDLIST_ID     6035
#define STRINGWORDS_ID  6036

typedef struct WORDLIST
{
    int ID;
    char name[NSIZE+1];     /* name */
    char fname[NSIZE+1];    /* input file name */
    char *words;            /* allocated space for words */
    int n_words;            /* amount of allocated space */
    int wsize;              /* (max) Size of words */
    int n;                  /* number */
} WORDLIST;

#define DEF_WLWSIZE     100     /* default wordlist wordsize */
#define CHECK_WORDLIST(fp)      if(fp){DestroyWordlistI(fp);fp=NULL;}


typedef struct STRINGWORDS
{
    int ID;
    char *string;           /* Pointer to string; NOT allocated */
    int slen;               /* String len */
    int *st_pos, *en_pos;   /* Start / end positions; ALLOCATED */
    int n_pos;              /* Allocated array size */
    char sep;               /* Word-separator char */
    int num;                /* Number of words */
} STRINGWORDS;

#define DEF_SWNUM       1000    /* default number of words for stringwords */
#define DEF_SWSEP       ' '     /* default word separator char */
#define CHECK_STRINGWORDS(fp)   if(fp){DestroyStringwordsI(fp);fp=NULL;}


/*********************** ppp ********************
* C function listing generated by gen_prot
* Sun Sep 15 17:11:59 2019
*/
/****************************************************************
* wordlist.c
*/
WORDLIST *CreateWordlistPO(char *fnameS, int wsize);
int DestroyWordlistI(WORDLIST *wlPO);
void InitWordlist(WORDLIST *wlPO, int wsize);
int HandleWordlistSpaceI(WORDLIST *wlPO, int i);
void DumpWordlist(WORDLIST *wlPO, int st, int en, FILE *outPF);
int SetWordlistWsizeI(WORDLIST *wlPO, int wsize);
int SetWordlistLengthI(WORDLIST *wlPO, int len);
int GetWordlistLengthI(WORDLIST *wlPO);
int AppendWdordlistWordI(WORDLIST *wlPO, char *wS, int fit);
int AddWordlistWordI(WORDLIST *wlPO, int w, char *wS, int fit);
int SetWordlistWordI(WORDLIST *wlPO, int w, char *wS, int fit);
int GetWordlistWordI(WORDLIST *wlPO, int w, char *wS, int max);
int WordlistLenStatsI(WORDLIST *wlPO, int *minPI, int *maxPI, DOUB *avPD);
int WordlistAutoFormatStringI(WORDLIST *wlPO, int *wPI, char *formS);
int LoadWordlistFromStringI(WORDLIST *wlPO, char *bufS, char sepC);
int WordInWordlistI(WORDLIST *wlPO, char *wordS, int kc, int st, int sub, int *whichPI);
int WordlistLoadFromFileI(WORDLIST *wlPO, char *fnameS, int wsize);
int LoadWordStringFromFileI(FILE *fPF, int max, char **arrayPPC);
STRINGWORDS *CreateStringwordsPO(int n, char sepC);
int DestroyStringwordsI(STRINGWORDS *swPO);
void InitStringwords(STRINGWORDS *swPO);
void DumpStringwords(STRINGWORDS *swPO, int st, int en, FILE *outPF);
void SetStringwordsSep(STRINGWORDS *swPO, char sepC);
int LoadStringwordsI(STRINGWORDS *swPO, char *bufS, int slen);
int GetStringwordsNumI(STRINGWORDS *swPO);
int GetStringwordsCoordsI(STRINGWORDS *swPO, int w, int *sPI, int *ePI);
int GetStringwordsWordI(STRINGWORDS *swPO, int w, char *wordS, int max);


#endif
